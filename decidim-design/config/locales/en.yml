---
en:
  decidim:
    design:
      foundations:
        accessibility:
          accessibility_labels: Accessibility labels
          accessibility_labels_paragraph: When defining elements, always make sure they make sense for screen reader users.
          accessibility_title: Accessibility
          adjacent_links: Adjacent links
          adjacent_links_header: Adjacent links for the same resource
          adjacent_links_paragraph: If the same resource has multiple adjacent links pointing to it, it makes it difficult for such users to glance through the page because they might need to go through multiple links to get to the next resource.
          color_contrast: Color contrast
          color_contrast_paragraph: When creating user interfaces or modifying the colors, always make sure that you are not breaking accessibility with your changes. You can use the Color contrast checker to ensure that your colors have enough contrast against the background color where they are displayed at.
          decidim_follows_html: Decidim follows the <u>Web Content Accessibility Guidelines (WCAG) 2.1</u>
          dynamic_changes_header: Dynamic functionality changes the page context unintuitively
          dynamic_changes_paragraph: Changes in the form inputs should not change the context of the page automatically.
          elements_hidden: Elements hidden
          elements_hidden_header: Elements hidden from the accessibility API
          elements_hidden_paragraph: To hide an element from assistive technologies, use the aria-hidden="true" attribute on it.
          heading_on: Heading on important sections
          here_link: here
          illogical_heading_order: Illogical heading order
          illogical_heading_paragraph: Every page should have a logical heading order when using the <h1>, <h2>, <h3>, <h4>, <h5> and <h6> heading elements.
          important_sections_heading: Heading on important sections
          important_sections_paragraph: It is highly important that each important section of the page has a heading to make it easier to understand what important sections are on the page just by browsing through its headings.
          links_and_buttons: Links and Buttons
          links_and_buttons_paragraph: The anchor elements (i.e. links) are meant to link to different pages or to anchor positions within the page. If the element is supposed to e.g. open some hidden item on that page, you should use the <button> element instead.
          see_further_info_html: See further info %{link}
          unique_h1: Unique H1
          unique_h1_paragraph: Every page should have a unique H1 heading on it
          use_aria: Use ARIA
          use_aria_header: Use ARIA attributes where possible
          use_aria_paragraph: Many elements that provide interactive functionality on the website require ARIA attributes on them to make them accessible.
        color:
          color_header: Color
          description_p1: We provide a Base palette with few colors so simple customizations are easy. You can modify the Base palette either in the Administration area or in the Tailwind configuration file if you need more advanced customization.
          description_p2_html: When customizing your colors, have in mind the %{contrast_link}. You can check the contrast of your choosing with %{checker_link} or other similar tools.
          wcag_compliant_rations: WCAG 2.1 AA compliant contrast ratio
          wcag_contrast_checker: WebAIM Contrast Checker
        iconography:
          description_iconography: We use icons to reinforce the meaning of actions, titles, etc
          description_iconography_html: 'We use the Remixicon open source library: %{iconography_link}'
          title: Iconography
        layout:
          breakpoint: Breakpoint
          breakpoints: Breakpoints
          centered: Centered
          code: Code
          columns: Being the number of columns 10, 8 or 6.
          description_layout_p1: For desktop, Decidim uses a 12 column grid with limited number of templates (grid configurations) for different types of content. The objective is that a given type of content (homepage, list of elements, individual item) has a distinctive layout, so users can understand in which kind of content they are just by the general look of the page.
          description_layout_p2: These simple rules should be followed when creating new modules or customizing existing ones, so a Decidim site can maintain its consistency.
          desktop: Desktop
          full_width: Full width
          layout_list_1: 'Homepage (of the site, of an space): full width'
          layout_list_2: 'List of elements (of spaces, of items inside a space, etc): left aside'
          layout_list_3: 'Individual item (proposal, blog post): centered, optionally with a right aside'
          left_aside: Left aside
          mobile: Mobile
          not_required: Not required
          properties: Properties
          right_aside: Right Aside
          section_p_breakpoints: 'To manage the responsive max-width of elements we rely on the default `container` Tailwind class, which states the following breakpoints:'
          section_p_code: When implementing new modules you have some helpers that automatically provides you with the code needed to setup the HTML structure. You should use these helpers instead of directly using div elements with classes, so you maintain consistency.
          section_p_code_html: You can find the basic layouts in %{link_section_code}
          section_p_desktop: Desktop grid system is composed of 12 flexible columns with a gutter between columns of 16px and left and right margins of 48px
          section_p_mobile: Mobile grid system is composed of 4 flexible columns with a gutter between columns of 16px and left and right margins of 16px. For sizes below 320px this margins are set to 8px
          section_p_tablet: Tablet grid system is composed of 8 flexible columns with a gutter between columns of 16px and left and right margins of 24px
          tablet: Tablet
          title: Layout
      helpers:
        background: Background and borders
        base: Base
        form_elements: Form elements
        hex_code: Hex code
        main_colors: Main Colors
        rgba_code: RGBA code
        state: State
        tailwind: Tailwind name
        typography_texts: Typography and texts
        usage: Usage
        usage_background_1: Aside background
        usage_background_2: Selected sidebar filter background
        usage_background_3: Default icon color
        usage_background_4: Lines and separators
        usage_background_5: Footer background
        usage_background_6: Admin layout background
        usage_base_1: Main nav component background\nNav menus in homepage and space home
        usage_base_2: Main color for links and buttons
        usage_base_3: Graphic ornaments and accent color\nCards and list items hover state border
        usage_formelements_1: Input elements default background
        usage_formelements_2: Input elements disabled state background
        usage_state_1: Success notice border\nAlert notice icon fill\nButton background on success message
        usage_state_2: Warning notice border
        usage_state_3: Alert notice border\nAlert notice icon fill
        usage_typography_1: Headings and section titles
        usage_typography_2: Inline text
        usage_typography_3: Text over dark background
        usage_typography_4: Links and buttons
        value: Value
      home:
        index:
          by_sharing_principles: By sharing the principles, philosophy, and rationale behind design decisions we want to empower the community to contribute with consistency so we reach the best participant experience.
          decidim_guide: The guide to design all things Decidim
          different_ui_components: At the same time, we document the different UI components and patterns in use, that should be reused or extended.
          github_source: Source code on GitHub
          home_header: Decidim Design Guide
          welcome_sentence: Welcome to the Decidim Design Guide (DDG). This guide is the resource for designers and developers who need to customize, develop new modules, and integrate new features.
