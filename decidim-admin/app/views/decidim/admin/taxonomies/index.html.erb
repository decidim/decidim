<% add_decidim_page_title(t("taxonomies", scope: "decidim.admin.titles")) %>
<div class="card" id="areas" role="region" aria-labelledby="taxonomies-title">
  <div class="item_show__header">
    <h1 class="item_show__header-title" id="taxonomies-title">
      <%= t "decidim.admin.titles.taxonomies" %>
      <% if allowed_to? :create, :taxonomy %>
        <%= link_to t("new.create", scope: "decidim.admin.taxonomies"), new_taxonomy_path, class: "button button__sm button__secondary new" %>
      <% end %>
    </h1>
  </div>
  <% if taxonomies.any? %>
    <div class="filters__section">
      <div class="fcell search">
        <%= search_form_for(@query, url: taxonomies_path) do |form| %>
          <div class="input-group">
            <%= form.search_field(
                  :name_cont,
                  class: "input-group-field bg-secondary/5",
                  label: false,
                  placeholder: t("filters.search_placeholder", scope: "decidim.admin.taxonomies")
                ) %>
            <div class="input-group-button">
              <button type="submit" class="text-secondary" aria-label="<%= t("decidim.search.term_input_placeholder") %>">
                <%= icon "search-line", class: "fill-secondary w-4 h-4" %>
              </button>
            </div>
          </div>
        <% end %>
      </div>
    </div>
    <div class="table-scroll" role="table" aria-labelledby="taxonomies-title">
      <table class="table-list">
        <thead>
        <tr role="row">
          <th scope="col" role="columnheader"><span class="sr-only">Move</span></th>
          <th scope="col" role="columnheader" class="!text-left"><%= t("decidim.admin.taxonomies.name") %></th>
          <th scope="col" role="columnheader"><%= t("decidim.admin.taxonomies.amount") %></th>
          <th scope="col" role="columnheader"><%= t("decidim.admin.taxonomies.actions") %></th>
        </tr>
        </thead>
        <tbody class="draggable-list js-connect js-list-available" data-sort-url="<%= taxonomies_path %>" role="rowgroup">
        <% taxonomies.each do |taxonomy| %>
          <tr class="draggable-item" data-content-block-id="<%= taxonomy.id %>" draggable="true" role="row">
            <td role="cell"><%== icon("drag-move-2-fill") %></td>
            <td class="!text-left" role="cell"><%= translated_attribute(taxonomy.name) %></td>
            <td role="cell"><%= taxonomy.children.count %></td>
            <td class="table-list__actions" role="cell">
              <% if allowed_to? :update, :taxonomy, taxonomy: taxonomy %>
                <%= link_to icon("pencil-line"), [:edit, taxonomy], class: "action-icon--edit", method: :get, data: {}, aria: { label: t("actions.edit", scope: "decidim.admin") } %>
              <% end %>

              <% if allowed_to? :destroy, :taxonomy, taxonomy: taxonomy %>
                <%= link_to icon("delete-bin-line"), taxonomy, method: :delete, class: "action-icon--remove", data: { confirm: t("actions.confirm_destroy", scope: "decidim.admin") }, aria: { label: t("actions.destroy", scope: "decidim.admin") } %>
              <% end %>
            </td>
          </tr>
        <% end %>
        </tbody>
      </table>
    </div>
  <% else %>
    <p><%= t("decidim.admin.taxonomies.no_taxonomies") %></p>
  <% end %>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const draggables = document.querySelectorAll(".draggable-item");
    const container = document.querySelector(".js-list-available");

    draggables.forEach(draggable => {
      draggable.addEventListener("dragstart", (e) => {
        e.dataTransfer.effectAllowed = "move";
        e.dataTransfer.setData("text/html", e.target.outerHTML);
        setTimeout(() => {
          draggable.classList.add("dragging");
        }, 0);
      });

      draggable.addEventListener("dragend", () => {
        draggable.classList.remove("dragging");
        const activeBlocks = Array.from(container.querySelectorAll(".draggable-item"));
        const activeBlocksId = activeBlocks.map(block => block.dataset.contentBlockId);

        $.ajax({
          method: "POST",
          url: container.dataset.sortUrl,
          contentType: "application/json",
          data: JSON.stringify({ ids_order: activeBlocksId }),
          success: function(response) {
            console.log("Order saved:", response);
          },
          error: function(error) {
            console.error("Error saving order:", error);
          }
        });
      });
    });

    container.addEventListener("dragover", (e) => {
      e.preventDefault();
      const dragging = document.querySelector(".dragging");
      const afterElement = getDragAfterElement(container, e.clientY);
      if (afterElement == null) {
        container.appendChild(dragging);
      } else {
        container.insertBefore(dragging, afterElement);
      }
    });

    function getDragAfterElement(container, y) {
      const draggableElements = [...container.querySelectorAll(".draggable-item:not(.dragging)")];

      return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        if (offset < 0 && offset > closest.offset) {
          return { offset: offset, element: child };
        } else {
          return closest;
        }
      }, { offset: Number.NEGATIVE_INFINITY }).element;
    }
  });
</script>
