<%
@title = "Decidim Admin"
@activesection = "settings"
@activepage = "settings-scopes"
%>

<%= partial "template_top" %>
<div class="layout-nav">
  <%= partial "settings_nav" %>
</div>
<div class="layout-content">
  <div class="container">
    <div class="grid-container full">
      <div class="grid-x grid-margin-x card-grid">
        <div class="cell small-6">
          <div class="card">
            <div class="card-section">
              <p class="mb-m">Bloques activos</p>
              <ul id="draggable-list-<%= rand(5..30) %>" class="draggable-list">
                <% 5.times do %>
                <li draggable="true">
                  <div class="draggable-content">
                    <%= Faker::Job.field %>
                    <div>
                      <%= link_to page_path("#"), class: "mr-s text-muted" do %>
                      <%= icon "pencil" %>
                      <% end %>
                      <%= icon "menu" %>
                    </div>
                  </div>
                </li>
                <% end %>
              </ul>
            </div>
          </div>
        </div>
        <div class="cell small-6">
          <div class="card">
            <div class="card-section">
              <p class="mb-m">Bloques disponibles</p>
              <ul id="draggable-list-<%= rand(5..30) %>" class="draggable-list">
                <% 2.times do %>
                <li draggable="true">
                  <div class="draggable-content">
                    <%= Faker::Job.field %>
                    <div>
                      <%= link_to page_path("#"), class: "mr-s text-muted" do %>
                      <%= icon "pencil" %>
                      <% end %>
                      <%= icon "menu" %>
                    </div>
                  </div>
                </li>
                <% end %>
              </ul>
              <a href="#">+ <u>nuevo bloque HTML</u></a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<%= partial "template_bottom" %>

<script type="text/javascript">

var dragSrcEl = null;

function handleDragStart(e) {
  // Target (this) element is the source node.
  dragSrcEl = this;

  e.dataTransfer.effectAllowed = 'move';
  e.dataTransfer.setData('text/html', this.outerHTML);

  this.classList.add('dragging');
}

function handleDragOver(e) {
  if (e.preventDefault) {
    e.preventDefault(); // Necessary. Allows us to drop.
  }
  this.classList.add('over');

  e.dataTransfer.dropEffect = 'move'; // See the section on the DataTransfer object.

  return false;
}

function handleDragLeave(e) {
  this.classList.remove('over'); // this / e.target is previous target element.
}

function handleDrop(e) {
  // this/e.target is current target element.

  if (e.stopPropagation) {
    e.stopPropagation(); // Stops some browsers from redirecting.
  }

  // Don't do anything if dropping the same column we're dragging.
  if (dragSrcEl != this) {
    // Set the source column's HTML to the HTML of the column we dropped on.
    //alert(this.outerHTML);
    //dragSrcEl.innerHTML = this.innerHTML;
    //this.innerHTML = e.dataTransfer.getData('text/html');
    this.parentNode.removeChild(dragSrcEl);
    var dropHTML = e.dataTransfer.getData('text/html');
    this.insertAdjacentHTML('beforebegin', dropHTML);
    var dropElem = this.previousSibling;
    addDnDHandlers(dropElem);

  }
  this.classList.remove('over');
  return false;
}

function handleDragEnd(e) {
  this.classList.remove('over');
  this.classList.remove('dragging');
}

function addDnDHandlers(elem) {
  elem.addEventListener('dragstart', handleDragStart, false);
  elem.addEventListener('dragover', handleDragOver, false);
  elem.addEventListener('dragleave', handleDragLeave, false);
  elem.addEventListener('drop', handleDrop, false);
  elem.addEventListener('dragend', handleDragEnd, false);
}

var cols = document.querySelectorAll('.draggable-list [draggable]');
[].forEach.call(cols, addDnDHandlers);

</script>
