name: "[CI] Elections (unit tests)"
on:
  push:
    branches:
      - develop
      - release/*
      - "*-stable"
  pull_request:
    branches-ignore:
      - "chore/l10n*"
    paths:
      - "*"
      - ".github/**"
      - "decidim-admin/**"
      - "decidim-bulletin_board/**"
      - "decidim-core/**"
      - "decidim-dev/**"
      - "decidim-elections/**"
      - "decidim-forms/**"
      - "decidim-proposals/**"

env:
  CI: "true"
  SIMPLECOV: "true"
  RUBY_VERSION: 2.7.1
  NODE_VERSION: 15.14.0
  DECIDIM_MODULE: decidim-elections

jobs:
  main:
    name: Tests
    runs-on: ubuntu-latest
    if: "!startsWith(github.head_ref, 'chore/l10n')"
    timeout-minutes: 60
    services:
      postgres:
        image: postgres:11
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_PASSWORD: postgres
      bulletin_board:
        image: codegram/decidim-bulletin-board:0.21.1
        ports: ["8000:8000"]
        env:
          DATABASE_URL: postgresql://postgres:postgres@postgres/bb
          RAILS_ENV: test
          SEED: 1
          IDENTIFICATION_PRIVATE_KEY: '{"kty":"RSA","n":"zMXsZpYPKkDlSmezX898y7zNOaJ7ENIN4kj4UhQ95Vm4HlgTpIs2VMMsO0eqynMaOR_G1mXdqbpbaJtXijBe4V8323QwGm6WVAa71E7pDXa5g6-uo5f8GePitN0YER9y2yNQN4uTaNzJiWV2uLBUYfMdj3SIif31YwLULHAOj3B_oleFK8coE_Qr3NzATcYBmsqE8AR4NljxTO6KDmP1SLdf5GBOBhOAIFbnL_Kpj2xkm7MS3hjMVKpiRhqA1UgX5oKZ8ixBv46fNJF0pBsHi3fHNjK9oZzgdx_AI-YFpdE_40-8bh_g9sWzxacqOM2-MdQLHbvRPEVltO3E8tr6I5YWrylcP7l9VD8OJeqjq2qFYHnGYdmLoD2XuXmI9EuBvSb9H4-qcartxZSIQCimKib_fxZvgrG1FSRRhK6YpvIdGv4-G2zfCCRsC4XD80TYI2bf-oYCoy7eU3_eVHFMV2yg4p1Wnuw2Vgq0edPL_bKaV9JvGx7F-U5juxNN0WZR9LzbPl4ReejzN95lyHgbj0nTH_u3bSpZmgJrQF-PwdnPcG46deVjJgUeosrlC4lQxVrRz0GL58BuFunnz2uYDBDrcJCiG60EbdkAFHjOcXU4wrUWATin7je_aqdBXhSnkTafcJAMvL7Y2Ld7vDge8nLqjAVlAi5am3rN0kqKT6M","e":"AQAB","kid":"a8e86f02ca27e1861bfc49e2a9a4614ca9068f8efdb6d42d19d3aab0eb2a31be"}'
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
          RAILS_SERVE_STATIC_FILES: enabled
          DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: true
    env:
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: localhost
      RUBYOPT: "-W:no-deprecated"
      ELECTIONS_BULLETIN_BOARD_SERVER: http://localhost:8000/api
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.0
        if: "github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v2.0.0
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Get npm cache directory path
        id: npm-cache-dir-path
        run: echo "::set-output name=dir::$(npm get cache)-${{ env.DECIDIM_MODULE }}"
      - uses: actions/cache@v2
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir-path.outputs.dir }}
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-
      - run: bundle exec rake test_app
        name: Create test app
      - run: mkdir -p ./spec/decidim_dummy_app/tmp/screenshots
        name: Create the screenshots folder
      - run: RAILS_ENV=test bundle exec rails assets:precompile
        name: Precompile assets
        working-directory: ./spec/decidim_dummy_app/
      - uses: nanasess/setup-chromedriver@v1.0.1
      - run: bundle exec rspec --exclude-pattern 'spec/system/**/*_spec.rb'
        name: RSpec
        working-directory: ${{ env.DECIDIM_MODULE }}
      - run: ./.github/upload_coverage.sh $DECIDIM_MODULE $GITHUB_EVENT_PATH
        name: Upload coverage
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: screenshots
          path: ./spec/decidim_dummy_app/tmp/screenshots
          if-no-files-found: ignore
